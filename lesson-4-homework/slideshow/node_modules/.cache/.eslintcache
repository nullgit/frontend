[{"A:\\computer\\github\\frontend\\lesson-4-homework\\slideshow\\src\\index.js":"1","A:\\computer\\github\\frontend\\lesson-4-homework\\slideshow\\src\\App.js":"2"},{"size":150,"mtime":1617362732484,"results":"3","hashOfConfig":"4"},{"size":4919,"mtime":1617412564469,"results":"5","hashOfConfig":"4"},{"filePath":"6","messages":"7","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"9gwojj",{"filePath":"8","messages":"9","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"10"},"A:\\computer\\github\\frontend\\lesson-4-homework\\slideshow\\src\\index.js",[],"A:\\computer\\github\\frontend\\lesson-4-homework\\slideshow\\src\\App.js",["11","12","13"],"import React, { Component } from 'react'\r\nimport './css/reset.css'\r\nimport './App.css'\r\n\r\nexport default class App extends Component {\r\n\r\n    constructor() {\r\n        super()\r\n        this.state = {\r\n            srcs: [5, 0, 1]\r\n        };\r\n        this.onTouchMove = this.onTouchMove.bind(this)\r\n        this.onTouchStart = this.onTouchStart.bind(this)\r\n        this.onTouchEnd = this.onTouchEnd.bind(this)\r\n        this.moveLeft = this.moveLeft.bind(this)\r\n        this.moveRight = this.moveRight.bind(this)\r\n        this.next = this.next.bind(this)\r\n        this.last = this.last.bind(this)\r\n\r\n        this.state.timer = setInterval(() => {\r\n            this.moveLeft(true)\r\n        }, 3000)\r\n    }\r\n\r\n    onTouchStart(event) {\r\n        this.setState({LastTouch:event.touches[0].clientX})\r\n        this.setState({ startTouch: event.touches[0].clientX })\r\n        clearInterval(this.state.timer)\r\n    }\r\n\r\n    onTouchEnd(event) {\r\n        let distance = this.state.LastTouch - this.state.startTouch\r\n        console.log(distance)\r\n        if (distance < -100) {\r\n            this.moveLeft(true)\r\n        } else if (distance > 100) {\r\n            this.moveRight(true)\r\n        } else if (distance > 0) {\r\n            this.moveLeft(false)\r\n        } else if (distance < 0) {\r\n            this.moveRight(false)\r\n        }\r\n        this.setState({timer:setInterval(() => {\r\n            this.moveLeft(true)\r\n        }, 3000)})\r\n    }\r\n\r\n    onTouchMove(event) {\r\n        let touch = event.touches[0].clientX\r\n        let p = event.target.parentNode.parentNode\r\n        p.style.left = p.offsetLeft + touch - this.state.LastTouch + \"px\"\r\n        this.setState({LastTouch:touch})\r\n    }\r\n\r\n    moveLeft(recover) {\r\n        let p\r\n        let timer = setInterval(() => {\r\n            p = document.getElementsByTagName('ul')[0]\r\n            p.style.left = p.offsetLeft - 5 + \"px\"\r\n            if (Math.abs(p.offsetLeft + 300) < 4 || Math.abs(p.offsetLeft + 600) < 6) {\r\n                clearInterval(timer)\r\n                if (recover) {\r\n                    let srcs = this.state.srcs\r\n                    srcs[1] = (srcs[1] + 1) % 6\r\n                    this.setState({ srcs: srcs })\r\n                    \r\n                    document.getElementsByTagName('ul')[0].style.left = \"-300px\"\r\n                    \r\n                    srcs = this.state.srcs\r\n                    srcs[0] = (srcs[0] + 1) % 6\r\n                    srcs[2] = (srcs[2] + 1) % 6\r\n                    this.setState({ srcs: srcs })\r\n                }\r\n                document.getElementsByTagName('ul')[0].style.left = \"-300px\"\r\n            }\r\n        }, 10);\r\n    }\r\n\r\n    moveRight(recover) {\r\n        let p\r\n        let timer = setInterval(() => {\r\n            p = document.getElementsByTagName('ul')[0]\r\n            p.style.left = p.offsetLeft + 5 + \"px\"\r\n            console.log(p.offsetLeft)\r\n            if (Math.abs(p.offsetLeft) < 4 || Math.abs(p.offsetLeft + 300) < 4) {\r\n                clearInterval(timer)\r\n                if (recover) {\r\n                    let srcs = this.state.srcs\r\n                    srcs[1] = (srcs[1] - 1) == -1 ? 5 : (srcs[1] - 1)\r\n                    this.setState({ srcs: srcs })\r\n                    \r\n                    document.getElementsByTagName('ul')[0].style.left = \"-300px\"\r\n                    \r\n                    srcs = this.state.srcs\r\n                    srcs[0] = (srcs[0] - 1) == -1 ? 5 : (srcs[0] - 1)\r\n                    srcs[2] = (srcs[2] - 1) == -1 ? 5 : (srcs[2] - 1)\r\n                    this.setState({ srcs: srcs })\r\n                }\r\n                document.getElementsByTagName('ul')[0].style.left = \"-300px\"\r\n            }\r\n        }, 10);\r\n    }\r\n\r\n    next() {\r\n        clearInterval(this.state.timer)\r\n        this.moveLeft(true)\r\n        this.setState({timer:setInterval(() => {\r\n            this.moveLeft(true)\r\n        }, 3000)})\r\n    }\r\n\r\n    last() {\r\n        clearInterval(this.state.timer)\r\n        this.moveRight(true)\r\n        this.setState({timer:setInterval(() => {\r\n            this.moveLeft(true)\r\n        }, 3000)})\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className='App-wrapper'>\r\n                <div className='App'>\r\n                    <ul className='Slide'\r\n                        onTouchMove={this.onTouchMove}\r\n                        onTouchStart={this.onTouchStart}\r\n                        onTouchEnd={this.onTouchEnd}\r\n                    >\r\n                        {\r\n                            this.state['srcs'].map((src, index) => {\r\n                                return <li key={index}><img src={\"./img/img (\" + src +\").png\"} alt=''/></li>\r\n                            })\r\n                        }\r\n                    </ul>\r\n                </div>\r\n                <button onClick={this.last}>上一张</button>\r\n                <button onClick={this.next}>下一张</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n",{"ruleId":"14","severity":1,"message":"15","line":89,"column":45,"nodeType":"16","messageId":"17","endLine":89,"endColumn":47},{"ruleId":"14","severity":1,"message":"15","line":95,"column":45,"nodeType":"16","messageId":"17","endLine":95,"endColumn":47},{"ruleId":"14","severity":1,"message":"15","line":96,"column":45,"nodeType":"16","messageId":"17","endLine":96,"endColumn":47},"eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected"]